1. Напишите функцию с именем fibonacci, которая принимает число n в
качестве входных данных и генерирует последовательность Фибоначчи
до n-го члена. Вернуть последовательность в виде списка.
Также добавьте в функцию использование кэша

2. Напишите функцию find_anagrams, которая принимает на вход список
слов и возвращает список кортежей, где каждый кортеж содержит пару
анаграмм. Анаграммы — это слова, которые имеют одинаковые символы,
но в другом порядке.

3. Напишите функцию с именем compress_file, которая принимает имя
файла в качестве входных данных и создает сжатую версию файла,
используя простой алгоритм сжатия. Алгоритм заменяет последовательные
вхождения одного и того же символа одним экземпляром этого символа,
за которым следует количество его вхождений.

4. Напишите декоратор с именем file_read_write, который можно применять
к любой функции, принимающей в качестве аргументов имя входного и/или
выходного файла. Декоратор должен обрабатывать открытие входного файла
в режиме чтения и выходного файла в режиме записи, если они были переданы,
а также передавать открытые файловые объекты декоративной функции.

Пример 1:
@file_read_write(input_filename='old.txt')
def func(filename):  функция читает какой-то файл
    string = filename.read()

Пример 2:
@file_read_write(input_filename='old.txt', output_filename='new.txt')
def func(file_in, file_out):  функция сразу может делать операции с файлами
    string = file_in.read()
    file_out.write(string)